name: Development Pipeline

on:
  workflow_dispatch:
  push:
    branches: [dev, workflow-dev]
  pull_request:
    branches: [dev, workflow-dev]
    types: [opened]

env:
  NODE_VERSION: 18

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # frontend and backend build should be separated since they have different engines field in package.json
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }} # no issue even if backend uses node v16 since this is just linting and testing on frontend
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          # replace this with node_modules but how to reference different paths since 3 dirs (root, frontend, backend)
          # check if cache size changes when you remove a path
          # check if path means the folder structure of cache
          # need to specify all paths since not installing all packages will result in eslint errors (import/no-unresolved, node/no-missing-require)
          path: |
            node_modules
            ./frontend/node_modules
            ./backend/node_modules
          # check if hashFiles looks for all package-lock.json files in all directories
          # glob pattern is correct
          # check if hash changes when you add a dependency in frontend
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        # check deps installed again
        run: |
          npm ci --prefix .
          npm ci --prefix ./frontend
          npm ci --prefix ./backend
      - name: Lint code
        run: npm run lint

  test-build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./frontend/node_modules
          # node_modules ./backend/node_modules
          key: deps-node-modules-${{ hashFiles('./frontend/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          npm ci --prefix ./frontend
        # npm ci --prefix . && npm ci --prefix frontend
        # no need to install project and backend deps in this job
      - name: Unit tests
        run: |
          npm run test --prefix ./frontend
      - name: Build frontend
        run: |
          npm run build --prefix ./frontend
      - name: Dockerize frontend # may not need docker since can be deployed to a hosted machine for development
        run: |
          echo "Building docker image..."
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            ./frontend/build

  # may not need to be separated from test-build-frontend since this will be dockerized eventually so node-version can be set in the Dockerfile
  test-build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16 # v16 specified in engines field of package.json
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ./backend/node_modules
          # node_modules ./frontend/node_modules
          key: deps-node-modules-${{ hashFiles('./backend/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          npm ci --prefix ./backend
      - name: Unit tests
        run: |
          echo "Running unit tests"
        # npm run test -- prefix ./backend  # add this when unit tests have been added to backend
      - name: Build backend
        run: |
          echo "Building backend..."
      - name: Dockerize backend
        run: |
          echo "Building docker image..."

  # integration tests occur after docker images have been built for both frontend and backend
  test-integration:
    needs: [test-build-frontend, test-build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }} # backend uses node v16 but this may not be an issue since we will be dockerizing the frontend and backend
      - name: Run containers
        run: |
          echo "Running docker containers"
      - name: Integration tests
        run: |
          echo "Running integration tests..."

  deploy:
    needs: test-integration
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Development # frontend to Vercel and backend to DO for development
        run: |
          echo "Deploying frontend to Vercel and backend to DO"
